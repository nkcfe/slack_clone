{"ast":null,"code":"var _jsxFileName = \"/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/ChatInput.jsx\",\n  _s = $RefreshSig$();\nimport { Grid, IconButton, InputAdornment, TextField } from '@mui/material';\nimport InsertEmoticonIcon from '@mui/icons-material/InsertEmoticon';\nimport ImageIcon from '@mui/icons-material/Image';\nimport SendIcon from '@mui/icons-material/Send';\nimport React, { useCallback, useState } from 'react';\nimport '../../firebase';\nimport { getDatabase, push, ref, serverTimestamp, set } from 'firebase/database';\nimport { useSelector } from 'react-redux';\nimport data from '@emoji-mart/data';\nimport Picker from '@emoji-mart/react';\nimport ImageModal from '../Modal/ImageModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatInput() {\n  _s();\n  var _channel$currentChann;\n  // 채널 정보 가져오기\n  const {\n    channel,\n    user\n  } = useSelector(state => state);\n\n  //message 상태\n  const [message, setMessage] = useState('');\n\n  //loading 상태\n  const [loading, setLoading] = useState(false);\n\n  //Emoji toggle\n  const [showEmoji, setShowEmoji] = useState(false);\n\n  //이모지\n  const handleTogglePicker = useCallback(() => {\n    setShowEmoji(show => !show);\n  }, []);\n\n  //message onChange로 저장\n  const handleChange = useCallback(e => {\n    setMessage(e.target.value);\n  }, []);\n\n  // 메세지 생성\n  const createMessage = useCallback(() => ({\n    timestamp: serverTimestamp(),\n    user: {\n      id: user.currentUser.uid,\n      name: user.currentUser.displayName,\n      avatar: user.currentUser.photoURL\n    },\n    content: message\n  }), [message, user.currentUser.uid, user.currentUser.displayName, user.currentUser.photoURL]);\n\n  // 메시지 전송\n  const clickSendMessage = useCallback(async () => {\n    // 메세지가 없을경우 방어\n    if (!message) return;\n    setLoading(true);\n\n    // firebass realtimedatabase에 메세지 저장\n    try {\n      await set(push(ref(getDatabase(), 'messages/' + channel.currentChannel.id)), createMessage());\n      setLoading(false);\n      setMessage('');\n    } catch (error) {\n      console.error(error);\n      setLoading(false);\n    }\n  }, [message, (_channel$currentChann = channel.currentChannel) === null || _channel$currentChann === void 0 ? void 0 : _channel$currentChann.id, createMessage]);\n\n  // 이모지를 파싱하는 메소드\n  const handleSelectEmoji = useCallback(e => {\n    const sym = e.unified.split('-');\n    const codesArray = [];\n    sym.forEach(el => codesArray.push('0x' + el));\n    const emoji = String.fromCodePoint(...codesArray);\n    setMessage(messageValue => messageValue + emoji);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    sx: {\n      p: '20px'\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      sx: {\n        position: 'relative'\n      },\n      children: [showEmoji && /*#__PURE__*/_jsxDEV(Picker, {\n        data: data,\n        onEmojiSelect: handleSelectEmoji,\n        className: \"emojipicker\",\n        title: \"\\uC774\\uBAA8\\uC9C0\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694.\",\n        emoji: \"point_up\",\n        style: {\n          position: 'absolute',\n          bottom: '80px'\n        },\n        theme: \"light\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        InputProps: {\n          startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: handleTogglePicker,\n              children: /*#__PURE__*/_jsxDEV(InsertEmoticonIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              children: /*#__PURE__*/_jsxDEV(ImageIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this),\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"start\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              disabled: loading,\n              onClick: clickSendMessage,\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this)\n        },\n        autoComplete: \"off\",\n        label: \"\\uBA54\\uC138\\uC9C0 \\uC785\\uB825\",\n        fullWidth: true,\n        value: message,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImageModal, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatInput, \"qhnTp1vWX/6B/YqRS5y0eSjhR54=\", false, function () {\n  return [useSelector];\n});\n_c = ChatInput;\nvar _c;\n$RefreshReg$(_c, \"ChatInput\");","map":{"version":3,"names":["Grid","IconButton","InputAdornment","TextField","InsertEmoticonIcon","ImageIcon","SendIcon","React","useCallback","useState","getDatabase","push","ref","serverTimestamp","set","useSelector","data","Picker","ImageModal","jsxDEV","_jsxDEV","ChatInput","_s","_channel$currentChann","channel","user","state","message","setMessage","loading","setLoading","showEmoji","setShowEmoji","handleTogglePicker","show","handleChange","e","target","value","createMessage","timestamp","id","currentUser","uid","name","displayName","avatar","photoURL","content","clickSendMessage","currentChannel","error","console","handleSelectEmoji","sym","unified","split","codesArray","forEach","el","emoji","String","fromCodePoint","messageValue","container","sx","p","children","item","xs","position","onEmojiSelect","className","title","style","bottom","theme","fileName","_jsxFileName","lineNumber","columnNumber","InputProps","startAdornment","onClick","endAdornment","disabled","autoComplete","label","fullWidth","onChange","_c","$RefreshReg$"],"sources":["/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/ChatInput.jsx"],"sourcesContent":["import { Grid, IconButton, InputAdornment, TextField } from '@mui/material'\nimport InsertEmoticonIcon from '@mui/icons-material/InsertEmoticon'\nimport ImageIcon from '@mui/icons-material/Image'\nimport SendIcon from '@mui/icons-material/Send'\nimport React, { useCallback, useState } from 'react'\nimport '../../firebase'\nimport { getDatabase, push, ref, serverTimestamp, set } from 'firebase/database'\nimport { useSelector } from 'react-redux'\nimport data from '@emoji-mart/data'\nimport Picker from '@emoji-mart/react'\nimport ImageModal from '../Modal/ImageModal'\n\nexport default function ChatInput() {\n  // 채널 정보 가져오기\n  const { channel, user } = useSelector(state => state)\n\n  //message 상태\n  const [message, setMessage] = useState('')\n\n  //loading 상태\n  const [loading, setLoading] = useState(false)\n\n  //Emoji toggle\n  const [showEmoji, setShowEmoji] = useState(false)\n\n  //이모지\n  const handleTogglePicker = useCallback(() => {\n    setShowEmoji(show => !show)\n  }, [])\n\n  //message onChange로 저장\n  const handleChange = useCallback(e => {\n    setMessage(e.target.value)\n  }, [])\n\n  // 메세지 생성\n  const createMessage = useCallback(\n    () => ({\n      timestamp: serverTimestamp(),\n      user: {\n        id: user.currentUser.uid,\n        name: user.currentUser.displayName,\n        avatar: user.currentUser.photoURL,\n      },\n      content: message,\n    }),\n    [\n      message,\n      user.currentUser.uid,\n      user.currentUser.displayName,\n      user.currentUser.photoURL,\n    ]\n  )\n\n  // 메시지 전송\n  const clickSendMessage = useCallback(async () => {\n    // 메세지가 없을경우 방어\n    if (!message) return\n    setLoading(true)\n\n    // firebass realtimedatabase에 메세지 저장\n    try {\n      await set(\n        push(ref(getDatabase(), 'messages/' + channel.currentChannel.id)),\n        createMessage()\n      )\n      setLoading(false)\n      setMessage('')\n    } catch (error) {\n      console.error(error)\n      setLoading(false)\n    }\n  }, [message, channel.currentChannel?.id, createMessage])\n\n  // 이모지를 파싱하는 메소드\n  const handleSelectEmoji = useCallback(e => {\n    const sym = e.unified.split('-')\n    const codesArray = []\n    sym.forEach(el => codesArray.push('0x' + el))\n    const emoji = String.fromCodePoint(...codesArray)\n    setMessage(messageValue => messageValue + emoji)\n  }, [])\n\n  return (\n    <Grid container sx={{ p: '20px' }}>\n      <Grid item xs={12} sx={{ position: 'relative' }}>\n        {showEmoji && (\n          <Picker\n            data={data}\n            onEmojiSelect={handleSelectEmoji}\n            className=\"emojipicker\"\n            title=\"이모지를 선택하세요.\"\n            emoji=\"point_up\"\n            style={{ position: 'absolute', bottom: '80px' }}\n            theme=\"light\"\n          />\n        )}\n        <TextField\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <IconButton onClick={handleTogglePicker}>\n                  <InsertEmoticonIcon />\n                </IconButton>\n                <IconButton>\n                  <ImageIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n            endAdornment: (\n              <InputAdornment position=\"start\">\n                <IconButton disabled={loading} onClick={clickSendMessage}>\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n          autoComplete=\"off\"\n          label=\"메세지 입력\"\n          fullWidth\n          value={message}\n          onChange={handleChange}\n        />\n        <ImageModal />\n      </Grid>\n    </Grid>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}