{"ast":null,"code":"var _jsxFileName = \"/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/Chat.jsx\",\n  _s = $RefreshSig$();\nimport { Divider, Grid, List, Paper, Toolbar } from '@mui/material';\nimport React, { useEffect, useRef, useState } from 'react';\nimport ChatHeader from './ChatHeader';\nimport { useSelector } from 'react-redux';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\nimport '../../firebase';\nimport { child, get, getDatabase, onChildAdded, orderByChild, query, ref, startAt } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n  // redux에서 채널명 가져오기\n  const {\n    channel,\n    user\n  } = useSelector(state => state);\n\n  // 메세지\n  const [messages, setMessages] = useState([]);\n  const messageEndRef = useRef();\n\n  // firebase에 저장된 메시지 가져오기\n  useEffect(() => {\n    // 채널, 유저정보 없을 경우 방어\n    if (!channel.currentChannel) return;\n\n    // 메시지 가져오기\n    async function getMessages() {\n      const snapShot = await get(child(ref(getDatabase()), 'messages/' + channel.currentChannel.id));\n      setMessages(snapShot.val() ? Object.values(snapShot.val()) : []);\n    }\n    getMessages();\n    return () => {\n      setMessages([]);\n    };\n  }, [channel.currentChannel]);\n\n  // 메시지 정렬 기능 / 최적화\n  useEffect(() => {\n    if (!channel.currentChannel) return;\n\n    // timestamp를 기준으로 정렬\n    const sorted = query(ref(getDatabase(), 'messages/' + channel.currentChannel.id), orderByChild('timestamp'));\n\n    // 현재시점부터 추가된 메세지를 콜백으로 추가.\n    const unsubscribe = onChildAdded(\n    // onChildAdded는 순차적으로 데이터를 가져온다. (동기)\n    query(sorted, startAt(Date.now())), snapshot => setMessages(oldMessages => [...oldMessages, snapshot.val()]));\n    return () => {\n      unsubscribe === null || unsubscribe === void 0 ? void 0 : unsubscribe();\n    };\n  }, [channel.currentChannel]);\n  useEffect(() => {\n    const setTimeoutId = setTimeout(() => {\n      messageEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }, 2000);\n    return () => {\n      clearTimeout(setTimeoutId);\n    };\n  }, [messages.length]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatHeader, {\n      channelInfo: channel.currentChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: Paper,\n      variant: \"outlined\",\n      sx: {\n        mt: 3,\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        sx: {\n          height: 'calc(100vh - 350px)',\n          overflow: 'scroll',\n          width: '100%',\n          position: 'relative'\n        },\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message,\n          user: user\n        }, message.timestamp, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messageEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"qf3jF6OLgp06VaCv7sT4oYC30lI=\", false, function () {\n  return [useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Divider","Grid","List","Paper","Toolbar","React","useEffect","useRef","useState","ChatHeader","useSelector","ChatInput","ChatMessage","child","get","getDatabase","onChildAdded","orderByChild","query","ref","startAt","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","channel","user","state","messages","setMessages","messageEndRef","currentChannel","getMessages","snapShot","id","val","Object","values","sorted","unsubscribe","Date","now","snapshot","oldMessages","setTimeoutId","setTimeout","current","scrollIntoView","behavior","clearTimeout","length","children","fileName","_jsxFileName","lineNumber","columnNumber","channelInfo","container","component","variant","sx","mt","position","height","overflow","width","map","message","timestamp","_c","$RefreshReg$"],"sources":["/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/Chat.jsx"],"sourcesContent":["import { Divider, Grid, List, Paper, Toolbar } from '@mui/material'\nimport React, { useEffect, useRef, useState } from 'react'\nimport ChatHeader from './ChatHeader'\nimport { useSelector } from 'react-redux'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\nimport '../../firebase'\nimport {\n  child,\n  get,\n  getDatabase,\n  onChildAdded,\n  orderByChild,\n  query,\n  ref,\n  startAt,\n} from 'firebase/database'\n\nexport default function Chat() {\n  // redux에서 채널명 가져오기\n  const { channel, user } = useSelector(state => state)\n\n  // 메세지\n  const [messages, setMessages] = useState([])\n\n  const messageEndRef = useRef()\n\n  // firebase에 저장된 메시지 가져오기\n  useEffect(() => {\n    // 채널, 유저정보 없을 경우 방어\n    if (!channel.currentChannel) return\n\n    // 메시지 가져오기\n    async function getMessages() {\n      const snapShot = await get(\n        child(ref(getDatabase()), 'messages/' + channel.currentChannel.id)\n      )\n      setMessages(snapShot.val() ? Object.values(snapShot.val()) : [])\n    }\n    getMessages()\n    return () => {\n      setMessages([])\n    }\n  }, [channel.currentChannel])\n\n  // 메시지 정렬 기능 / 최적화\n  useEffect(() => {\n    if (!channel.currentChannel) return\n\n    // timestamp를 기준으로 정렬\n    const sorted = query(\n      ref(getDatabase(), 'messages/' + channel.currentChannel.id),\n      orderByChild('timestamp')\n    )\n\n    // 현재시점부터 추가된 메세지를 콜백으로 추가.\n    const unsubscribe = onChildAdded(\n      // onChildAdded는 순차적으로 데이터를 가져온다. (동기)\n      query(sorted, startAt(Date.now())),\n      snapshot => setMessages(oldMessages => [...oldMessages, snapshot.val()])\n    )\n\n    return () => {\n      unsubscribe?.()\n    }\n  }, [channel.currentChannel])\n\n  useEffect(() => {\n    const setTimeoutId = setTimeout(() => {\n      messageEndRef.current.scrollIntoView({ behavior: 'smooth' })\n    }, 2000)\n    return () => {\n      clearTimeout(setTimeoutId)\n    }\n  }, [messages.length])\n\n  return (\n    <>\n      <Toolbar />\n      <ChatHeader channelInfo={channel.currentChannel} />\n      <Grid\n        container\n        component={Paper}\n        variant=\"outlined\"\n        sx={{ mt: 3, position: 'relative' }}\n      >\n        <List\n          sx={{\n            height: 'calc(100vh - 350px)',\n            overflow: 'scroll',\n            width: '100%',\n            position: 'relative',\n          }}\n        >\n          {messages.map(message => (\n            <ChatMessage\n              key={message.timestamp}\n              message={message}\n              user={user}\n            />\n          ))}\n          <div ref={messageEndRef}></div>\n        </List>\n        <Divider />\n        <ChatInput />\n      </Grid>\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}