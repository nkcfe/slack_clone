{"ast":null,"code":"var _jsxFileName = \"/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/Chat.jsx\",\n  _s = $RefreshSig$();\nimport { Divider, Grid, List, Paper, Toolbar } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport ChatHeader from './ChatHeader';\nimport { useSelector } from 'react-redux';\nimport ChatInput from './ChatInput';\nimport ChatMessage from './ChatMessage';\nimport '../../firebase';\nimport { child, get, getDatabase, ref } from 'firebase/database';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Chat() {\n  _s();\n  // redux에서 채널명 가져오기\n  const {\n    channel,\n    user\n  } = useSelector(state => state);\n\n  // 메세지\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // 채널, 유저정보 없을 경우 방어\n    if (!channel.currentChannel || !user.currentUser) return;\n    async function getMessages() {\n      const snapShot = await get(child(ref(getDatabase()), 'messages/' + channel.currentChannel.id));\n      setMessages(snapShot.val() ? Object.values(snapShot.val()) : []);\n    }\n    getMessages();\n    return () => {\n      setMessages([]);\n    };\n  }, [channel.currentChannel, user.curentUser]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatHeader, {\n      channelInfo: channel.currentChannel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      component: Paper,\n      variant: \"outlined\",\n      sx: {\n        mt: 3,\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        sx: {\n          height: 'calc(100vh - 350px)',\n          overflow: 'scroll',\n          width: '100%',\n          position: 'relative'\n        },\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(ChatMessage, {\n          message: message,\n          user: user\n        }, message.timestamp, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Chat, \"8uQMXaoqV/VIxxewlDZQy7Mun1U=\", false, function () {\n  return [useSelector];\n});\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["Divider","Grid","List","Paper","Toolbar","React","useEffect","useState","ChatHeader","useSelector","ChatInput","ChatMessage","child","get","getDatabase","ref","jsxDEV","_jsxDEV","Fragment","_Fragment","Chat","_s","channel","user","state","messages","setMessages","currentChannel","currentUser","getMessages","snapShot","id","val","Object","values","curentUser","children","fileName","_jsxFileName","lineNumber","columnNumber","channelInfo","container","component","variant","sx","mt","position","height","overflow","width","map","message","timestamp","_c","$RefreshReg$"],"sources":["/Users/chulnamgoong/Documents/front_end/slack/src/components/Chat/Chat.jsx"],"sourcesContent":["import { Divider, Grid, List, Paper, Toolbar } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport ChatHeader from './ChatHeader'\nimport { useSelector } from 'react-redux'\nimport ChatInput from './ChatInput'\nimport ChatMessage from './ChatMessage'\nimport '../../firebase'\nimport { child, get, getDatabase, ref } from 'firebase/database'\n\nexport default function Chat() {\n  // redux에서 채널명 가져오기\n  const { channel, user } = useSelector(state => state)\n\n  // 메세지\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    // 채널, 유저정보 없을 경우 방어\n    if (!channel.currentChannel || !user.currentUser) return\n\n    async function getMessages() {\n      const snapShot = await get(\n        child(ref(getDatabase()), 'messages/' + channel.currentChannel.id)\n      )\n      setMessages(snapShot.val() ? Object.values(snapShot.val()) : [])\n    }\n    getMessages()\n    return () => {\n      setMessages([])\n    }\n  }, [channel.currentChannel, user.curentUser])\n\n  return (\n    <>\n      <Toolbar />\n      <ChatHeader channelInfo={channel.currentChannel} />\n      <Grid\n        container\n        component={Paper}\n        variant=\"outlined\"\n        sx={{ mt: 3, position: 'relative' }}\n      >\n        <List\n          sx={{\n            height: 'calc(100vh - 350px)',\n            overflow: 'scroll',\n            width: '100%',\n            position: 'relative',\n          }}\n        >\n          {messages.map(message => (\n            <ChatMessage\n              key={message.timestamp}\n              message={message}\n              user={user}\n            />\n          ))}\n        </List>\n        <Divider />\n        <ChatInput />\n      </Grid>\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}